name: CI (Build/Lint/Tests/SQL/RLS/Security)

on:
  pull_request:
  push:
    branches: [ main ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-test:
    runs-on: ubuntu-latest
    # Exponemos los secrets como ENV del job
    env:
      VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
      VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY }}

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: app/package-lock.json

      # Creamos .env para que Vitest/Vite lean import.meta.env.*
      - name: Create .env for CI
        working-directory: app
        run: |
          printf "VITE_SUPABASE_URL=%s\n" "$VITE_SUPABASE_URL" > .env
          printf "VITE_SUPABASE_ANON_KEY=%s\n" "$VITE_SUPABASE_ANON_KEY" >> .env
          echo "CI .env created:"
          cat .env

      - name: Install deps
        working-directory: app
        run: npm ci || npm i

      - name: Lint (temp)
        working-directory: app
        run: npm run lint || true

      - name: Unit tests
        working-directory: app
        run: npm test

      - name: E2E (smoke)
        working-directory: app
        run: node tests/smoke-e2e.mjs || true

  sql-rls:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
        ports: ["5432:5432"]
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v4

      - name: Wait for DB
        run: |
          for i in {1..30}; do
            pg_isready -h localhost -p 5432 && break
            sleep 2
          done

      - name: Apply init_core.sql
        run: psql postgresql://postgres:postgres@localhost:5432/postgres -f supabase/sql/init_core.sql

      - name: Run RLS tests
        run: psql postgresql://postgres:postgres@localhost:5432/postgres -f supabase/sql/tests/rls_tests.sql

  security:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Gitleaks con inputs correctos (guarda/oculta posibles secrets)
      - name: gitleaks (secret scan)
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          config-path: .gitleaks.toml
          redact: "true"
