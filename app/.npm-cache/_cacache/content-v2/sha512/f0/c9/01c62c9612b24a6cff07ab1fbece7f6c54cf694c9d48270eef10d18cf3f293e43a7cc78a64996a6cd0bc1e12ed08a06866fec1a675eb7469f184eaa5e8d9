{"_id":"emoji-regex-xs","_rev":"3-726331c60eb50da41733feb1ea518dea","name":"emoji-regex-xs","dist-tags":{"latest":"2.0.1"},"versions":{"1.0.0":{"name":"emoji-regex-xs","version":"1.0.0","keywords":["unicode","regex","regexp","emoji"],"author":{"name":"Steven Levithan"},"license":"MIT","_id":"emoji-regex-xs@1.0.0","homepage":"https://github.com/slevithan/emoji-regex-xs#readme","bugs":{"url":"https://github.com/slevithan/emoji-regex-xs/issues"},"dist":{"shasum":"e8af22e5d9dbd7f7f22d280af3d19d2aab5b0724","tarball":"https://registry.npmjs.org/emoji-regex-xs/-/emoji-regex-xs-1.0.0.tgz","fileCount":6,"integrity":"sha512-LRlerrMYoIDrT6jgpeZ2YYl/L8EulRTt5hQcYjy5AInh7HWXKimpqx68aknBFpGL2+/IcogTcaydJEgaTmOpDg==","signatures":[{"sig":"MEQCIEBmid0+PbPQVVyy64RHHsFodMp3RUhz18B38dzeUChuAiBFrGzuI4hwowr5uBaa15CILVWM2cYsneulNpcjLNW/9A==","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":7814},"main":"index.js","types":"index.d.ts","module":"index.mjs","gitHead":"3d48849d7ef205c3e55ee2be3794d84477ee12be","scripts":{"test":"mocha"},"_npmUser":{"name":"slevithan","email":"steves_list@hotmail.com"},"repository":{"url":"git+https://github.com/slevithan/emoji-regex-xs.git","type":"git"},"_npmVersion":"10.8.1","description":"A regular expression to match all emoji-only symbols","directories":{},"_nodeVersion":"22.3.0","_hasShrinkwrap":false,"devDependencies":{"mocha":"^10.5.2","@unicode/unicode-15.1.0":"^1.5.2"},"_npmOperationalInternal":{"tmp":"tmp/emoji-regex-xs_1.0.0_1719591748544_0.6429362597406745","host":"s3://npm-registry-packages"}},"2.0.0":{"name":"emoji-regex-xs","version":"2.0.0","keywords":["unicode","regex","regexp","emoji"],"author":{"name":"Steven Levithan"},"license":"MIT","_id":"emoji-regex-xs@2.0.0","maintainers":[{"name":"slevithan","email":"steves_list@hotmail.com"}],"homepage":"https://github.com/slevithan/emoji-regex-xs#readme","bugs":{"url":"https://github.com/slevithan/emoji-regex-xs/issues"},"dist":{"shasum":"74d481f5e4cb81135490947aa1a4fc7c1dff2787","tarball":"https://registry.npmjs.org/emoji-regex-xs/-/emoji-regex-xs-2.0.0.tgz","fileCount":6,"integrity":"sha512-UQ1cudFpxNJU0mZfbite6736JIz1PHVeMb35qVOX/WSfuWQhYI98/J+zO5HAoCuDxN0mmkizIgmqwQF1j9ZeHw==","signatures":[{"sig":"MEYCIQDHES+mdKGd9AGE4BHsL3GKkneGpNdm9p2CjxZxmezkZgIhAOkBn21JMEztvyYvdJ6oBpU6yUpgDw2cfBIVVUl1PqNT","keyid":"SHA256:DhQ8wR5APBvFHLF/+Tc+AYvPOdTpcIDqOhxsBHRwC7U"}],"unpackedSize":10055},"main":"index.js","types":"index.d.ts","module":"index.mjs","engines":{"node":">=10.0.0"},"gitHead":"f3efa7a2e5977d4333e58827ec7821205f2ccd9f","scripts":{"test":"mocha"},"_npmUser":{"name":"slevithan","email":"steves_list@hotmail.com"},"repository":{"url":"git+https://github.com/slevithan/emoji-regex-xs.git","type":"git"},"_npmVersion":"10.9.2","description":"A regular expression to match all emoji-only symbols","directories":{},"_nodeVersion":"23.11.0","_hasShrinkwrap":false,"devDependencies":{"mocha":"^11.1.0","@unicode/unicode-16.0.0":"^1.6.5"},"_npmOperationalInternal":{"tmp":"tmp/emoji-regex-xs_2.0.0_1745257398938_0.16254918775967986","host":"s3://npm-registry-packages-npm-production"}},"2.0.1":{"name":"emoji-regex-xs","version":"2.0.1","description":"A regular expression to match all emoji-only symbols","main":"index.js","module":"index.mjs","types":"index.d.ts","keywords":["unicode","regex","regexp","emoji"],"license":"MIT","author":{"name":"Steven Levithan"},"repository":{"type":"git","url":"git+https://github.com/slevithan/emoji-regex-xs.git"},"scripts":{"test":"mocha"},"devDependencies":{"@unicode/unicode-16.0.0":"^1.6.5","mocha":"^11.1.0"},"engines":{"node":">=10.0.0"},"_id":"emoji-regex-xs@2.0.1","gitHead":"0e5c2549dc322185dbed6579edb9934000f939f6","bugs":{"url":"https://github.com/slevithan/emoji-regex-xs/issues"},"homepage":"https://github.com/slevithan/emoji-regex-xs#readme","_nodeVersion":"23.11.0","_npmVersion":"10.9.2","dist":{"integrity":"sha512-1QFuh8l7LqUcKe24LsPUNzjrzJQ7pgRwp1QMcZ5MX6mFplk2zQ08NVCM84++1cveaUUYtcCYHmeFEuNg16sU4g==","shasum":"012f4e4d88ecec8397df32d5b4ef89d422559c0e","tarball":"https://registry.npmjs.org/emoji-regex-xs/-/emoji-regex-xs-2.0.1.tgz","fileCount":6,"unpackedSize":10410,"signatures":[{"keyid":"SHA256:DhQ8wR5APBvFHLF/+Tc+AYvPOdTpcIDqOhxsBHRwC7U","sig":"MEYCIQDZCIqtrTDClHuQETt/T0hJXPii7S88c7kB1+WxOXaQxgIhAJM/6b10CVEz5rSuWDhxVv6Kt0U61buUlJsXPLVE5HCb"}]},"_npmUser":{"name":"slevithan","email":"steves_list@hotmail.com"},"directories":{},"maintainers":[{"name":"slevithan","email":"steves_list@hotmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages-npm-production","tmp":"tmp/emoji-regex-xs_2.0.1_1745326069275_0.40573023686627385"},"_hasShrinkwrap":false}},"time":{"created":"2024-06-28T16:22:28.543Z","modified":"2025-04-22T12:47:49.605Z","1.0.0":"2024-06-28T16:22:28.678Z","2.0.0":"2025-04-21T17:43:19.125Z","2.0.1":"2025-04-22T12:47:49.444Z"},"bugs":{"url":"https://github.com/slevithan/emoji-regex-xs/issues"},"author":{"name":"Steven Levithan"},"license":"MIT","homepage":"https://github.com/slevithan/emoji-regex-xs#readme","keywords":["unicode","regex","regexp","emoji"],"repository":{"type":"git","url":"git+https://github.com/slevithan/emoji-regex-xs.git"},"description":"A regular expression to match all emoji-only symbols","maintainers":[{"name":"slevithan","email":"steves_list@hotmail.com"}],"readme":"# emoji-regex-xs\n\n[![npm version][npm-version-src]][npm-version-href]\n[![npm downloads][npm-downloads-src]][npm-downloads-href]\n[![bundle][bundle-src]][bundle-href]\n\nThis is a drop-in replacement for the [*emoji-regex*](https://github.com/mathiasbynens/emoji-regex) package that shares its API and passes all of its emoji tests, but reduces its uncompressed size by more than 98% (from ~13 kB to ~0.2 kB). It manages this by relying on the Unicode version built into the JavaScript environment, rather than hard coding all emoji code points from a specific Unicode version.\n\n## Install and use\n\nVia npm:\n\n```sh\nnpm install emoji-regex-xs\n```\n\nIn Node.js:<br>\n(This is copied from *emoji-regex* to show that it works the same.)\n\n```js\nconst emojiRegex = require('emoji-regex-xs');\n// Or: import emojiRegex from 'emoji-regex-xs';\n\n// Note: because the regular expression has the global flag set, this module\n// exports a function that returns the regex rather than exporting the regular\n// expression itself, to make it impossible to (accidentally) mutate the\n// original regular expression.\n\nconst text = `\n\\u{231A}: ‚åö default emoji presentation character (Emoji_Presentation)\n\\u{2194}\\u{FE0F}: ‚ÜîÔ∏è default text presentation character rendered as emoji\n\\u{1F469}: üë© emoji modifier base (Emoji_Modifier_Base)\n\\u{1F469}\\u{1F3FF}: üë©üèø emoji modifier base followed by a modifier\n`;\n\nconst regex = emojiRegex();\nfor (const match of text.matchAll(regex)) {\n  const emoji = match[0];\n  console.log(`Matched sequence ${emoji} ‚Äî code points: ${[...emoji].length}`);\n}\n```\n\nConsole output:\n\n```js\nMatched sequence ‚åö ‚Äî code points: 1\nMatched sequence ‚åö ‚Äî code points: 1\nMatched sequence ‚ÜîÔ∏è ‚Äî code points: 2\nMatched sequence ‚ÜîÔ∏è ‚Äî code points: 2\nMatched sequence üë© ‚Äî code points: 1\nMatched sequence üë© ‚Äî code points: 1\nMatched sequence üë©üèø ‚Äî code points: 2\nMatched sequence üë©üèø ‚Äî code points: 2\n```\n\n## Comparison with *emoji-regex* and `\\p{RGI_Emoji}`\n\n<table>\n  <tr>\n    <th></th>\n    <th><i>emoji-regex</i></th>\n    <th><i>emoji-regex-xs</i></th>\n    <th><code>\\p{RGI_Emoji}</code></th>\n  </tr>\n  <tr>\n    <td><b>Compatibility</b></td>\n    <td>‚Ä¢ Node.js 4 <br> ‚Ä¢ 2015-era browsers</td>\n    <td>‚Ä¢ Node.js 10 <br> ‚Ä¢ 2016-era browsers</td>\n    <td>‚Ä¢ Node.js 20 <br> ‚Ä¢ 2023-era browsers</td>\n  </tr>\n  <tr>\n    <td><b>Uncompressed size</b></td>\n    <td>~13 kB</td>\n    <td>~0.2 kB</td>\n    <td>N/A</td>\n  </tr>\n  <tr>\n    <td><b>Gzipped size</b></td>\n    <td>~3 kB</td>\n    <td>~0.2 kB</td>\n    <td>N/A</td>\n  </tr>\n  <tr>\n    <td><b>Unicode version</b></td>\n    <td>Uses the latest Unicode version at the time of release, so results are deterministic.</td>\n    <td colspan=\"2\">Uses the Unicode version that your environment supports natively, so results match the handling of other functionality.</td>\n  </tr>\n  <tr>\n    <td><b>Matches everything matched by ES2024's <code>\\p{RGI_Emoji}</code></b></td>\n    <td>Yes.</td>\n    <td>Yes.</td>\n    <td>Yes.</td>\n  </tr>\n  <tr>\n    <td><b>Matches all non-RGI, underqualified emoji included in Unicode's <a href=\"https://unicode.org/Public/emoji/latest/emoji-test.txt\">emoji-test.txt</a></b></td>\n    <td>Yes.</td>\n    <td>Yes.</td>\n    <td>No/none.</td>\n  </tr>\n  <tr>\n    <td><b>Matches additional non-RGI emoji</b></td>\n    <td>Yes. Allows some overqualified emoji using an explicitly-defined <a href=\"https://github.com/mathiasbynens/emoji-test-regex-pattern/blob/main/script/get-sequences.js\">list</a>.</td>\n    <td>Yes. Uses a general pattern that matches all Unicode sequences that follow the structure of emoji.<sup>[1]</sup></td>\n    <td>No.</td>\n  </tr>\n</table>\n\n### Footnotes\n\n1. This allows *emoji-regex-xs* to match emoji supported on only some platforms (ex: [women wrestling: light skin](https://emojipedia.org/women-wrestling-light-skin-tone#designs) and [Texas flag](https://emojipedia.org/flag-for-texas-ustx#designs)) that aren't correctly matched by <i>emoji-regex</i>.\n\n## More details about emoji, Unicode properties, and regexes\n\nEmoji are complicated. Or more specifically, how they're defined in the Unicode Standard is complicated. So writing a regex that matches all/only emoji is also complicated. For starters, individual emoji can be made up of between one and *many* Unicode code points, and there are a variety of different sequence patterns. There are also a variety of Unicode symbols, dingbats, etc. that aren't emoji, that we don't want to match. And to make things worse, there are underqualified and overqualified emoji that are commonly diplayed as emoji and generated by certain emoji keyboards. The Unicode standard even includes a list of over a thousand underqualified emoji sequences that it recommends displaying and processing as emoji.\n\nGiven the complexity, many libraries that roll their own emoji regex get it very wrong, e.g. by matching emoji fragments that split off some of their attributes, or by matching things like digits (0, 1, 2, ‚Ä¶), #, \\*, or certain invisible characters. These characters are obviously not emoji, but they're matched by naive patterns because they might *become* emoji when followed by various combining characters. Or they might be special characters used in emoji sequences while not being emoji on their own.\n\nES2018 added support for matching Unicode properties in regular expressions with `\\p{‚Ä¶}`, so you might think this problem is now trivial, given that the list of supported properties includes `Emoji`, `Emoji_Presentation` (`EPres`), `Emoji_Modifier` (`EMod`), `Emoji_Modifier_Base` (`EBase`), `Emoji_Component` (`EComp`), and `Extended_Pictographic` (`ExtPict`). But no. On their own, none of these are what you want. They match only one code point at a time, and their matches variously include emoji fragments and non-emoji characters.\n\nES2024 added support for matching multicharacter Unicode *properties of strings* with `\\p{‚Ä¶}`, so you might think one of the new properties `Basic_Emoji`, `Emoji_Keycap_Sequence`, `RGI_Emoji_Modifier_Sequence`, `RGI_Emoji_Flag_Sequence`, `RGI_Emoji_Tag_Sequence`, `RGI_Emoji_ZWJ_Sequence`, or `RGI_Emoji` will do the trick. Well, kind of. `RGI_Emoji` indeed seems like what we want, but unfortunately, some broadly-supported emoji are not in the official \"RGI\" (Recommended for General Interchange) list. It also doesn't match underqualified and overqualified emoji that include or exclude certain invisible Unicode markers. For example, the iOS emoji keyboard overqualifies certain emoji. So we need something that matches everything in `RGI_Emoji`, and more. Additionally, `\\p{RGI_Emoji}` relies on flag `v`, which is only supported by 2023-era browsers ([support](https://caniuse.com/mdn-javascript_builtins_regexp_unicodesets)) and Node.js 20+.\n\nAll of this is why the popular *emoji-regex* package exists. It does a great job of accurately matching most common-sense emoji. But to do so, it uses a massive (~13 kB uncompressed) regex that hard codes a list of Unicode code points that are tied to a specific Unicode version. Conversely, *emoji-regex-xs* uses a general pattern that continues to be highly accurate in matching emoji, but uses only ~0.2 kB to do so. It follows *emoji-regex*'s API and reuses its tests, so it can be swapped-in as a replacement.\n\n> **Note:** The Unicode standard includes an [official regex](https://www.unicode.org/reports/tr51/#EBNF_and_Regex) for matching emoji. However, although it can serve as a good foundation (after adapting to the JavaScript regex flavor), it matches some non-emoji characters like digits 0-9 and it matches fragments of some underqualified emoji (including some of those in the Unicode standard's emoji-test.txt list).\n\n<!-- Badges -->\n\n[npm-version-src]: https://img.shields.io/npm/v/emoji-regex-xs?color=78C372\n[npm-version-href]: https://npmjs.com/package/emoji-regex-xs\n[npm-downloads-src]: https://img.shields.io/npm/dm/emoji-regex-xs?color=78C372\n[npm-downloads-href]: https://npmjs.com/package/emoji-regex-xs\n[bundle-src]: https://img.shields.io/bundlejs/size/emoji-regex-xs?color=78C372&label=minzip\n[bundle-href]: https://bundlejs.com/?q=emoji-regex-xs&treeshake=[*]\n","readmeFilename":"README.md"}