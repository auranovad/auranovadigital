{"_id":"warun","_rev":"2-e3a1b5030a341cf3400a041a5f22f92a","name":"warun","description":"CLI tool which does Watch and Run.","dist-tags":{"latest":"1.0.0"},"versions":{"1.0.0":{"name":"warun","version":"1.0.0","description":"CLI tool which does Watch and Run.","engines":{"node":">=4"},"bin":{"warun":"bin/index.js"},"main":"lib/index.js","files":["bin","lib"],"dependencies":{"chokidar":"^1.7.0","cross-spawn":"^5.1.0","debounce":"^1.0.2","minimist":"^1.2.0"},"devDependencies":{"babel-plugin-transform-async-to-generator":"^6.24.1","babel-preset-power-assert":"^1.0.0","babel-register":"^6.24.1","codecov":"^2.2.0","eslint":"^4.3.0","eslint-config-mysticatea":"^11.0.0","fs-extra":"^4.0.0","mocha":"^3.4.2","npm-run-all":"^4.0.2","nyc":"^11.0.3","opener":"^1.4.3","power-assert":"^1.4.4","wait-on":"^2.0.2"},"scripts":{"_mocha":"_mocha --require babel-register test/*.js --timeout 16000","clean":"rimraf .nyc_output coverage","codecov":"nyc report -r lcovonly && codecov","coverage":"nyc report --reporter lcov && opener coverage/lcov-report/index.html","lint":"eslint bin lib test","pretest":"npm run -s lint","test":"nyc npm run -s _mocha","preversion":"npm test","postversion":"git push && git push --tags","prewatch":"npm run -s clean","watch":"run-p watch:*","watch:test":"node bin/index.js bin lib test --initial -- nyc --reporter lcov npm run -s _mocha","watch:coverage":"wait-on coverage/lcov-report/index.html && opener coverage/lcov-report/index.html"},"repository":{"type":"git","url":"git+https://github.com/mysticatea/wr.git"},"keywords":["watch","run","exec","cli","chokidar"],"author":{"name":"Toru Nagashima","url":"https://github.com/mysticatea"},"license":"MIT","bugs":{"url":"https://github.com/mysticatea/wr/issues"},"homepage":"https://github.com/mysticatea/wr#readme","gitHead":"0998922cb2f26f59e2d4894d30c05d9f20ee0bda","_id":"warun@1.0.0","_npmVersion":"5.1.0","_nodeVersion":"8.1.4","_npmUser":{"name":"mysticatea","email":"star.ctor@gmail.com"},"dist":{"integrity":"sha512-mBHuk22HOphVPu+IGO3lIK+lPxaBcAl0vEaFCfAAG9WzL7kT9TORbJuGEjpooFzOOF6YQb+erNT7TWXWQE4PdQ==","shasum":"90d515eac370128fb9fd03f7fc92a9434c3a316c","tarball":"https://registry.npmjs.org/warun/-/warun-1.0.0.tgz","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIE/UQcvAX7z7IAHkwI8hJhiHRmOiH3sluA0c+vSmxx4RAiEAq0y8ixkEpX9tsjPF2ZCxc/czceUB6ASXBNNhmS1SJ7M="}]},"maintainers":[{"name":"mysticatea","email":"star.ctor@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/warun-1.0.0.tgz_1501270704709_0.4776166738010943"}}},"readme":"# warun\n\n[![npm version](https://img.shields.io/npm/v/warun.svg)](https://www.npmjs.com/package/warun)\n[![Downloads/month](https://img.shields.io/npm/dm/warun.svg)](http://www.npmtrends.com/warun)\n[![Build Status](https://travis-ci.org/mysticatea/warun.svg?branch=master)](https://travis-ci.org/mysticatea/warun)\n[![Build Status](https://ci.appveyor.com/api/projects/status/1xgm9jjd7j9dj1x5/branch/master?svg=true)](https://ci.appveyor.com/project/mysticatea/warun/branch/master)\n[![codecov](https://codecov.io/gh/mysticatea/warun/branch/master/graph/badge.svg)](https://codecov.io/gh/mysticatea/warun)\n[![Dependency Status](https://david-dm.org/mysticatea/warun.svg)](https://david-dm.org/mysticatea/warun)\n\n**Wa**tch files and **run** a command when they change.\n\n## ‚§¥Ô∏è Motivation\n\nThis is CLI tool similar to [chokidar-cli](https://github.com/kimmobrunfeldt/chokidar-cli).\nHowever, this does not run the command immediately if changes happen while the command is running. In that case, this waits for the finish of the previous command then this runs the command.\nThis will be useful if the command needs a long time.\n\n## üíø Installation\n\nUse [npm](https://www.npmjs.com/) to install.\n\n```console\n$ npm install -D warun\n```\n\n### Requirements\n\n- Node.js 4 or later.\n\n## üìñ Usage\n\n### CLI command\n\n```\nUsage: warun <FILES> [OPTIONS] -- <COMMAND> [COMMAND_ARGS]\n\n    Watch files and Run a command.\n\n    FILES .......... One or more glob patterns to watch files.\n    OPTIONS ........ Options below.\n    COMMAND ........ The command name to run.\n    COMMAND_ARGS ... The arguments of the command.\n\nOptions:\n    --no-initial .......... The flag to prevent the first run at ready.\n    --debounce <number> ... The debounce wait time in milliseconds.\n\nExamples:\n    $ warun lib test -- npm test\n    $ warun src --no-initial -- npm run build\n```\n\n### Node.js API\n\n```js\nconst warun = require(\"warun\")\n\n// Start watching\nconst watcher = warun.watch([\"src\"], \"npm\", [\"run\", \"build\"])\n\n// Stop watching\nwatcher.close()\n```\n\n#### watcher = new warun.Watcher(patterns, command, args, options)\n\nThe watcher class.<br>\nThis class inherits [EventEmitter](https://nodejs.org/api/events.html#events_class_eventemitter).\n\n##### Parameters\n\n- `patterns` (`string | string[]`) ... The glob patterns of target files.\n- `command` (`string`) ... The command to run.\n- `args` (`string[]`) ... The arguments of the command.\n- `options` (`object`) ... The options.\n    - `options.initial` (`boolean`) ... The flag to run the command at ready. Default is `true`.\n    - `options.debounce` (`number`) ... The debounce wait time in milliseconds. Default is `250`.\n\n#### watcher.requestCommand()\n\nRequest to run the command.\nCalls of this method are debounced.\n\n#### watcher.open()\n\nStart to watch files.\n\n#### watcher.close()\n\nStop watching.\n\n#### watcher.on(\"ready\", () => {})\n\nThe ready event.\nIt emits this event once after the watching of all target files started.\n\n#### watcher.on(\"change\", (event) => {})\n\nThe change event of files.\nIt emits this event on every change of files.\n\n- `event.type` is the type of the change.\n- `event.path` is the path to the changed file.\n\n#### watcher.on(\"error\", (error) => {})\n\nThe error event of files.\nIt emits this event on every error of the watcher.\n\n## üì∞ Changelog\n\n- [GitHub Releases](https://github.com/mysticatea/warun/releases)\n\n## üçª Contributing\n\nContributing is welcome ‚ù§\n\nPlease use GitHub's Issues/PRs.\n\n### Development Tools\n\n- `npm test` runs tests and measures coverage.\n- `npm run coverage` shows the coverage result of `npm test` command.\n- `npm run lint` runs ESLint.\n- `npm run watch` runs `warun` to run tests on every file change.\n","maintainers":[{"name":"mysticatea","email":"star.ctor@gmail.com"}],"time":{"modified":"2022-05-24T01:34:01.844Z","created":"2017-07-28T19:38:24.824Z","1.0.0":"2017-07-28T19:38:24.824Z"},"homepage":"https://github.com/mysticatea/wr#readme","keywords":["watch","run","exec","cli","chokidar"],"repository":{"type":"git","url":"git+https://github.com/mysticatea/wr.git"},"author":{"name":"Toru Nagashima","url":"https://github.com/mysticatea"},"bugs":{"url":"https://github.com/mysticatea/wr/issues"},"license":"MIT","readmeFilename":"README.md","users":{"jim-toth":true}}